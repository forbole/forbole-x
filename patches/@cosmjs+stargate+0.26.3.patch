diff --git a/node_modules/@cosmjs/stargate/build/accounts.js b/node_modules/@cosmjs/stargate/build/accounts.js
index 55753d0..ec8b325 100644
--- a/node_modules/@cosmjs/stargate/build/accounts.js
+++ b/node_modules/@cosmjs/stargate/build/accounts.js
@@ -58,6 +58,11 @@ function accountFromAny(input) {
             utils_1.assert(baseAccount);
             return accountFromBaseAccount(baseAccount);
         }
+        // custom
+        case "/desmos.profiles.v1beta1.Profile": {
+            const account = auth_1.ProfileAccount.decode(value).account;
+            return accountFromAny(account);
+        }
         default:
             throw new Error(`Unsupported type: '${typeUrl}'`);
     }
diff --git a/node_modules/@cosmjs/stargate/build/signingstargateclient.js b/node_modules/@cosmjs/stargate/build/signingstargateclient.js
index a2caf7a..5a395f2 100644
--- a/node_modules/@cosmjs/stargate/build/signingstargateclient.js
+++ b/node_modules/@cosmjs/stargate/build/signingstargateclient.js
@@ -227,7 +227,8 @@ class SigningStargateClient extends stargateclient_1.StargateClient {
         };
         const txBodyBytes = this.registry.encode(txBodyEncodeObject);
         const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();
-        const authInfoBytes = proto_signing_1.makeAuthInfoBytes([{ pubkey, sequence }], fee.amount, gasLimit);
+        const authInfoBytes = proto_signing_1.makeAuthInfoBytes([{ pubkey, sequence }], fee.amount, gasLimit, undefined, fee.granter);
+        console.log({ fee })
         const signDoc = proto_signing_1.makeSignDoc(txBodyBytes, authInfoBytes, chainId, accountNumber);
         const { signature, signed } = await this.signer.signDirect(signerAddress, signDoc);
         return tx_5.TxRaw.fromPartial({
diff --git a/node_modules/@cosmjs/stargate/build/stargateclient.js b/node_modules/@cosmjs/stargate/build/stargateclient.js
index 8278df5..1a44819 100644
--- a/node_modules/@cosmjs/stargate/build/stargateclient.js
+++ b/node_modules/@cosmjs/stargate/build/stargateclient.js
@@ -99,12 +99,12 @@ class StargateClient {
     }
     async getSequence(address) {
         const account = await this.getAccount(address);
-        if (!account) {
-            throw new Error("Account does not exist on chain. Send some tokens there before trying to query sequence.");
-        }
+        // if (!account) {
+        //     throw new Error("Account does not exist on chain. Send some tokens there before trying to query sequence.");
+        // }
         return {
-            accountNumber: account.accountNumber,
-            sequence: account.sequence,
+            accountNumber: account ? account.accountNumber : 0,
+            sequence: account ? account.sequence : 0,
         };
     }
     async getBlock(height) {
